
#pragma once

#include "tt/path/dirs.hpp"

#include "tt/path/directory_names.hpp"

namespace tt {

class SystemDirs : public Dirs {
public:
    [[nodiscard]] auto bindir() const -> std::filesystem::path override {
        return "@bindir@";
    }

    [[nodiscard]] auto confdir() const -> std::filesystem::path override {
        return "@confdir@";
    }

    [[nodiscard]] auto libexecdir() const -> std::filesystem::path override {
        return "@libexecdir@";
    }

    [[nodiscard]] auto livedir() const -> std::filesystem::path override {
        return "@livedir@";
    }

    [[nodiscard]] auto logdir() const -> std::filesystem::path override {
        return "@logdir@";
    }

    [[nodiscard]] auto servicedirs() const
        -> std::vector<std::filesystem::path> override {
        // confdir will be overridden by UserDirs. By calling confdir we might
        // call UserDirs::confdir which is not what we want
        return {SystemDirs::confdir() / kServiceDirectoryName, "@servicedir@"};
    }

    [[nodiscard]] auto statedir() const -> std::filesystem::path override {
        return "@statedir@";
    }

    [[nodiscard]] auto supervisedir() const -> std::filesystem::path override {
        // Same as servicedirs()
        auto dir = SystemDirs::livedir() / kSuperviseDirectoryName;
        std::filesystem::create_directories(dir);
        return dir;
    }
};

} // namespace tt
